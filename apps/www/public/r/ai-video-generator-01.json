{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-video-generator-01",
  "type": "registry:block",
  "description": "AI video generation agent with preview",
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "select",
    "textarea",
    "progress",
    "badge"
  ],
  "files": [
    {
      "path": "creative-tim/blocks/ai-video-generator-01/page.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  Clock,\n  Download,\n  FileVideo,\n  Film,\n  Loader2,\n  Pause,\n  Play,\n  Sparkles,\n  Video,\n} from \"lucide-react\"\n\nimport { Badge } from \"@/components/ui/badge\"\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport { Progress } from \"@/components/ui/progress\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport { Textarea } from \"@/components/ui/textarea\"\n\nconst AI_PROVIDERS = [\n  { value: \"runway\", label: \"Runway Gen-3\" },\n  { value: \"pika\", label: \"Pika Labs\" },\n  { value: \"stability\", label: \"Stability AI Video\" },\n  { value: \"google\", label: \"Google Veo\" },\n  { value: \"openai\", label: \"OpenAI Sora\" },\n]\n\nconst VIDEO_DURATIONS = [\n  { value: \"3\", label: \"3 seconds\" },\n  { value: \"5\", label: \"5 seconds\" },\n  { value: \"10\", label: \"10 seconds\" },\n  { value: \"15\", label: \"15 seconds\" },\n]\n\nconst VIDEO_STYLES = [\n  { value: \"realistic\", label: \"Realistic\" },\n  { value: \"cinematic\", label: \"Cinematic\" },\n  { value: \"animated\", label: \"Animated\" },\n  { value: \"artistic\", label: \"Artistic\" },\n  { value: \"abstract\", label: \"Abstract\" },\n]\n\ninterface GeneratedVideo {\n  id: string\n  prompt: string\n  url: string\n  thumbnail: string\n  duration: string\n  style: string\n  timestamp: Date\n}\n\nexport default function AIVideoGeneratorBlock() {\n  const [prompt, setPrompt] = React.useState(\"\")\n  const [provider, setProvider] = React.useState(\"runway\")\n  const [apiKey, setApiKey] = React.useState(\"\")\n  const [duration, setDuration] = React.useState(\"5\")\n  const [style, setStyle] = React.useState(\"realistic\")\n  const [isGenerating, setIsGenerating] = React.useState(false)\n  const [progress, setProgress] = React.useState(0)\n  const [generatedVideos, setGeneratedVideos] = React.useState<\n    GeneratedVideo[]\n  >([])\n  const [selectedVideo, setSelectedVideo] =\n    React.useState<GeneratedVideo | null>(null)\n  const [isPlaying, setIsPlaying] = React.useState(false)\n  const videoRef = React.useRef<HTMLVideoElement>(null)\n\n  const handleGenerate = async () => {\n    if (!prompt.trim() || !apiKey) return\n\n    setIsGenerating(true)\n    setProgress(0)\n\n    // Simulate video generation progress\n    const interval = setInterval(() => {\n      setProgress((prev) => {\n        if (prev >= 100) {\n          clearInterval(interval)\n          return 100\n        }\n        return prev + 5\n      })\n    }, 300)\n\n    // Simulate video generation\n    await new Promise((resolve) => setTimeout(resolve, 6000))\n\n    const newVideo: GeneratedVideo = {\n      id: Date.now().toString(),\n      prompt: prompt,\n      url: \"https://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4\",\n      thumbnail: `https://picsum.photos/seed/${Math.floor(Math.random() * 1000)}/640/360`,\n      duration: duration,\n      style: style,\n      timestamp: new Date(),\n    }\n\n    setGeneratedVideos((prev) => [newVideo, ...prev])\n    setSelectedVideo(newVideo)\n    setIsGenerating(false)\n    setProgress(0)\n  }\n\n  const togglePlayPause = () => {\n    if (!videoRef.current) return\n\n    if (isPlaying) {\n      videoRef.current.pause()\n    } else {\n      videoRef.current.play()\n    }\n    setIsPlaying(!isPlaying)\n  }\n\n  const handleDownload = () => {\n    if (!selectedVideo) return\n    const link = document.createElement(\"a\")\n    link.href = selectedVideo.url\n    link.download = `ai-video-${selectedVideo.id}.mp4`\n    link.click()\n  }\n\n  return (\n    <div className=\"container mx-auto py-8\">\n      <Card className=\"mx-auto max-w-7xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Video className=\"h-6 w-6\" />\n            AI Video Generation Agent\n          </CardTitle>\n          <div className=\"mt-4 grid gap-4 sm:grid-cols-2 lg:grid-cols-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"provider\">AI Provider</Label>\n              <Select value={provider} onValueChange={setProvider}>\n                <SelectTrigger id=\"provider\">\n                  <SelectValue placeholder=\"Select provider\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {AI_PROVIDERS.map((p) => (\n                    <SelectItem key={p.value} value={p.value}>\n                      {p.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"apiKey\">API Key</Label>\n              <Input\n                id=\"apiKey\"\n                type=\"password\"\n                placeholder=\"Enter your API key\"\n                value={apiKey}\n                onChange={(e) => setApiKey(e.target.value)}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"duration\">Duration</Label>\n              <Select value={duration} onValueChange={setDuration}>\n                <SelectTrigger id=\"duration\">\n                  <SelectValue placeholder=\"Select duration\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {VIDEO_DURATIONS.map((d) => (\n                    <SelectItem key={d.value} value={d.value}>\n                      {d.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"style\">Style</Label>\n              <Select value={style} onValueChange={setStyle}>\n                <SelectTrigger id=\"style\">\n                  <SelectValue placeholder=\"Select style\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {VIDEO_STYLES.map((s) => (\n                    <SelectItem key={s.value} value={s.value}>\n                      {s.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid gap-6 lg:grid-cols-3\">\n            <div className=\"space-y-4 lg:col-span-2\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"prompt\">Video Prompt</Label>\n                <Textarea\n                  id=\"prompt\"\n                  placeholder=\"Describe the video you want to generate... (e.g., 'A drone shot flying over a futuristic city at sunset')\"\n                  value={prompt}\n                  onChange={(e) => setPrompt(e.target.value)}\n                  rows={4}\n                  disabled={!apiKey || isGenerating}\n                />\n              </div>\n\n              <Button\n                onClick={handleGenerate}\n                disabled={!prompt.trim() || !apiKey || isGenerating}\n                className=\"w-full\"\n                size=\"lg\"\n              >\n                {isGenerating ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                    Generating Video...\n                  </>\n                ) : (\n                  <>\n                    <Sparkles className=\"mr-2 h-5 w-5\" />\n                    Generate Video\n                  </>\n                )}\n              </Button>\n\n              {isGenerating && (\n                <Card className=\"bg-muted/50\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between text-sm\">\n                        <span className=\"text-muted-foreground\">\n                          Processing video generation...\n                        </span>\n                        <span className=\"font-medium\">{progress}%</span>\n                      </div>\n                      <Progress value={progress} className=\"h-2\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {selectedVideo && (\n                <Card>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"space-y-1\">\n                        <CardTitle className=\"text-lg\">Preview</CardTitle>\n                        <p className=\"text-muted-foreground text-sm\">\n                          {selectedVideo.prompt}\n                        </p>\n                      </div>\n                      <div className=\"flex gap-2\">\n                        <Badge variant=\"secondary\">\n                          <Clock className=\"mr-1 h-3 w-3\" />\n                          {selectedVideo.duration}s\n                        </Badge>\n                        <Badge variant=\"secondary\" className=\"capitalize\">\n                          {selectedVideo.style}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"relative aspect-video w-full overflow-hidden rounded-lg bg-black\">\n                      <video\n                        ref={videoRef}\n                        src={selectedVideo.url}\n                        className=\"h-full w-full\"\n                        onPlay={() => setIsPlaying(true)}\n                        onPause={() => setIsPlaying(false)}\n                      />\n                      <div className=\"absolute inset-0 flex items-center justify-center\">\n                        <Button\n                          size=\"lg\"\n                          variant=\"secondary\"\n                          onClick={togglePlayPause}\n                          className=\"h-16 w-16 rounded-full\"\n                        >\n                          {isPlaying ? (\n                            <Pause className=\"h-6 w-6\" />\n                          ) : (\n                            <Play className=\"h-6 w-6\" />\n                          )}\n                        </Button>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button onClick={handleDownload} className=\"flex-1\">\n                        <Download className=\"mr-2 h-4 w-4\" />\n                        Download Video\n                      </Button>\n                      <Button\n                        variant=\"outline\"\n                        onClick={handleGenerate}\n                        disabled={isGenerating}\n                        className=\"flex-1\"\n                      >\n                        <Sparkles className=\"mr-2 h-4 w-4\" />\n                        Generate New\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              {!apiKey && (\n                <Card className=\"bg-muted/50\">\n                  <CardContent className=\"flex flex-col items-center justify-center py-12\">\n                    <FileVideo className=\"text-muted-foreground mb-4 h-12 w-12\" />\n                    <p className=\"text-muted-foreground text-center text-sm\">\n                      Please enter your API key to start generating videos\n                    </p>\n                  </CardContent>\n                </Card>\n              )}\n            </div>\n\n            <div className=\"space-y-4\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Generated Videos</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  {generatedVideos.length === 0 ? (\n                    <div className=\"text-muted-foreground py-8 text-center text-sm\">\n                      No videos generated yet\n                    </div>\n                  ) : (\n                    generatedVideos.map((video) => (\n                      <Card\n                        key={video.id}\n                        className={`cursor-pointer transition-colors ${\n                          selectedVideo?.id === video.id\n                            ? \"border-primary\"\n                            : \"hover:border-primary/50\"\n                        }`}\n                        onClick={() => setSelectedVideo(video)}\n                      >\n                        <CardContent className=\"p-3\">\n                          <div className=\"relative mb-2 aspect-video overflow-hidden rounded\">\n                            <img\n                              src={video.thumbnail}\n                              alt={video.prompt}\n                              className=\"h-full w-full object-cover\"\n                            />\n                            <div className=\"absolute inset-0 flex items-center justify-center bg-black/30\">\n                              <Play className=\"h-8 w-8 text-white\" />\n                            </div>\n                          </div>\n                          <p className=\"line-clamp-2 text-xs\">{video.prompt}</p>\n                          <div className=\"mt-2 flex items-center gap-2\">\n                            <Badge variant=\"secondary\" className=\"text-xs\">\n                              <Clock className=\"mr-1 h-3 w-3\" />\n                              {video.duration}s\n                            </Badge>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))\n                  )}\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-muted/50\">\n                <CardHeader>\n                  <CardTitle className=\"text-sm\">Tips</CardTitle>\n                </CardHeader>\n                <CardContent className=\"text-muted-foreground space-y-2 text-xs\">\n                  <p>• Be specific and descriptive in your prompts</p>\n                  <p>• Describe camera movements and angles</p>\n                  <p>• Mention lighting and atmosphere</p>\n                  <p>• Specify the mood and style you want</p>\n                  <p>• Keep prompts under 500 characters</p>\n                </CardContent>\n              </Card>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
      "type": "registry:page",
      "target": "app/ai-video-generator/page.tsx"
    }
  ],
  "meta": {
    "iframeHeight": "1100px",
    "container": "w-full bg-surface min-h-svh flex px-4 py-12 items-center md:py-20 justify-center min-w-0",
    "mobile": "component",
    "details": "Advanced AI video generation interface with progress tracking and gallery view. Generate videos from text descriptions using leading AI providers like Runway, Pika, and OpenAI Sora. Features customizable duration, style selection, real-time progress indicators, video preview with playback controls, and generation history. Perfect for video content creation, marketing materials, and AI-powered media platforms."
  },
  "categories": [
    "ai-agents"
  ]
}