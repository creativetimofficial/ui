{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "ai-image-generator-01",
  "type": "registry:block",
  "description": "AI image generator with upload and editor capabilities",
  "registryDependencies": [
    "button",
    "card",
    "input",
    "label",
    "select",
    "slider",
    "tabs",
    "textarea"
  ],
  "files": [
    {
      "path": "creative-tim/blocks/ai-image-generator-01/page.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport {\n  Download,\n  ImageIcon,\n  Loader2,\n  Move,\n  RotateCw,\n  Upload,\n  Wand2,\n  ZoomIn,\n  ZoomOut,\n} from \"lucide-react\"\n\nimport { Button } from \"@/components/ui/button\"\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\"\nimport { Input } from \"@/components/ui/input\"\nimport { Label } from \"@/components/ui/label\"\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\"\nimport { Slider } from \"@/components/ui/slider\"\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\"\nimport { Textarea } from \"@/components/ui/textarea\"\n\nconst AI_PROVIDERS = [\n  { value: \"openai\", label: \"OpenAI DALL-E\" },\n  { value: \"stability\", label: \"Stability AI\" },\n  { value: \"midjourney\", label: \"Midjourney\" },\n  { value: \"google\", label: \"Google Imagen\" },\n  { value: \"anthropic\", label: \"Anthropic\" },\n]\n\nconst IMAGE_SIZES = [\n  { value: \"1024x1024\", label: \"Square (1024x1024)\" },\n  { value: \"1024x1792\", label: \"Portrait (1024x1792)\" },\n  { value: \"1792x1024\", label: \"Landscape (1792x1024)\" },\n]\n\nexport default function AIImageGeneratorBlock() {\n  const [prompt, setPrompt] = React.useState(\"\")\n  const [provider, setProvider] = React.useState(\"openai\")\n  const [apiKey, setApiKey] = React.useState(\"\")\n  const [imageSize, setImageSize] = React.useState(\"1024x1024\")\n  const [isGenerating, setIsGenerating] = React.useState(false)\n  const [uploadedImage, setUploadedImage] = React.useState<string | null>(null)\n  const [generatedImage, setGeneratedImage] = React.useState<string | null>(\n    null\n  )\n  const [brightness, setBrightness] = React.useState([100])\n  const [contrast, setContrast] = React.useState([100])\n  const [saturation, setSaturation] = React.useState([100])\n  const fileInputRef = React.useRef<HTMLInputElement>(null)\n\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0]\n    if (file) {\n      const reader = new FileReader()\n      reader.onload = (e) => {\n        setUploadedImage(e.target?.result as string)\n      }\n      reader.readAsDataURL(file)\n    }\n  }\n\n  const handleGenerate = async () => {\n    if (!prompt.trim() || !apiKey) return\n\n    setIsGenerating(true)\n\n    // Simulate image generation\n    await new Promise((resolve) => setTimeout(resolve, 3000))\n\n    // Use a placeholder image service\n    const seed = Math.floor(Math.random() * 1000)\n    const [width, height] = imageSize.split(\"x\")\n    setGeneratedImage(`https://picsum.photos/seed/${seed}/${width}/${height}`)\n\n    setIsGenerating(false)\n  }\n\n  const handleDownload = () => {\n    if (!generatedImage) return\n    const link = document.createElement(\"a\")\n    link.href = generatedImage\n    link.download = \"ai-generated-image.png\"\n    link.click()\n  }\n\n  const resetEditor = () => {\n    setBrightness([100])\n    setContrast([100])\n    setSaturation([100])\n  }\n\n  const imageStyle = {\n    filter: `brightness(${brightness[0]}%) contrast(${contrast[0]}%) saturate(${saturation[0]}%)`,\n  }\n\n  return (\n    <div className=\"container mx-auto py-8\">\n      <Card className=\"mx-auto max-w-6xl\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <ImageIcon className=\"h-6 w-6\" />\n            AI Image Generator with Editor\n          </CardTitle>\n          <div className=\"mt-4 grid gap-4 sm:grid-cols-3\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"provider\">AI Provider</Label>\n              <Select value={provider} onValueChange={setProvider}>\n                <SelectTrigger id=\"provider\">\n                  <SelectValue placeholder=\"Select provider\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {AI_PROVIDERS.map((p) => (\n                    <SelectItem key={p.value} value={p.value}>\n                      {p.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"apiKey\">API Key</Label>\n              <Input\n                id=\"apiKey\"\n                type=\"password\"\n                placeholder=\"Enter your API key\"\n                value={apiKey}\n                onChange={(e) => setApiKey(e.target.value)}\n              />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"size\">Image Size</Label>\n              <Select value={imageSize} onValueChange={setImageSize}>\n                <SelectTrigger id=\"size\">\n                  <SelectValue placeholder=\"Select size\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {IMAGE_SIZES.map((size) => (\n                    <SelectItem key={size.value} value={size.value}>\n                      {size.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent>\n          <Tabs defaultValue=\"generate\" className=\"w-full\">\n            <TabsList className=\"grid w-full grid-cols-2\">\n              <TabsTrigger value=\"generate\">Generate</TabsTrigger>\n              <TabsTrigger value=\"edit\">Edit & Upload</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"generate\" className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"prompt\">Image Prompt</Label>\n                <Textarea\n                  id=\"prompt\"\n                  placeholder=\"Describe the image you want to generate... (e.g., 'A serene landscape with mountains at sunset')\"\n                  value={prompt}\n                  onChange={(e) => setPrompt(e.target.value)}\n                  rows={4}\n                  disabled={!apiKey}\n                />\n              </div>\n\n              <Button\n                onClick={handleGenerate}\n                disabled={!prompt.trim() || !apiKey || isGenerating}\n                className=\"w-full\"\n              >\n                {isGenerating ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Generating Image...\n                  </>\n                ) : (\n                  <>\n                    <Wand2 className=\"mr-2 h-4 w-4\" />\n                    Generate Image\n                  </>\n                )}\n              </Button>\n\n              {generatedImage && (\n                <div className=\"space-y-4\">\n                  <div className=\"relative aspect-square w-full overflow-hidden rounded-lg border bg-gray-100\">\n                    <img\n                      src={generatedImage}\n                      alt=\"Generated\"\n                      className=\"h-full w-full object-contain\"\n                    />\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button onClick={handleDownload} className=\"flex-1\">\n                      <Download className=\"mr-2 h-4 w-4\" />\n                      Download\n                    </Button>\n                    <Button\n                      variant=\"outline\"\n                      onClick={handleGenerate}\n                      disabled={isGenerating}\n                    >\n                      <RotateCw className=\"mr-2 h-4 w-4\" />\n                      Regenerate\n                    </Button>\n                  </div>\n                </div>\n              )}\n\n              {!apiKey && (\n                <p className=\"text-muted-foreground text-center text-sm\">\n                  Please enter your API key to start generating images\n                </p>\n              )}\n            </TabsContent>\n\n            <TabsContent value=\"edit\" className=\"space-y-4\">\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label>Upload Image</Label>\n                  <div className=\"flex gap-2\">\n                    <Input\n                      ref={fileInputRef}\n                      type=\"file\"\n                      accept=\"image/*\"\n                      onChange={handleFileUpload}\n                      className=\"flex-1\"\n                    />\n                    <Button\n                      variant=\"outline\"\n                      onClick={() => fileInputRef.current?.click()}\n                    >\n                      <Upload className=\"mr-2 h-4 w-4\" />\n                      Browse\n                    </Button>\n                  </div>\n                </div>\n\n                {(uploadedImage || generatedImage) && (\n                  <div className=\"space-y-4\">\n                    <div className=\"relative aspect-square w-full overflow-hidden rounded-lg border bg-gray-100\">\n                      <img\n                        src={uploadedImage || generatedImage || \"\"}\n                        alt=\"Editing\"\n                        className=\"h-full w-full object-contain\"\n                        style={imageStyle}\n                      />\n                    </div>\n\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"text-sm\">Image Editor</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-6\">\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <Label>Brightness</Label>\n                            <span className=\"text-muted-foreground text-sm\">\n                              {brightness[0]}%\n                            </span>\n                          </div>\n                          <Slider\n                            value={brightness}\n                            onValueChange={setBrightness}\n                            min={0}\n                            max={200}\n                            step={1}\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <Label>Contrast</Label>\n                            <span className=\"text-muted-foreground text-sm\">\n                              {contrast[0]}%\n                            </span>\n                          </div>\n                          <Slider\n                            value={contrast}\n                            onValueChange={setContrast}\n                            min={0}\n                            max={200}\n                            step={1}\n                          />\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <div className=\"flex items-center justify-between\">\n                            <Label>Saturation</Label>\n                            <span className=\"text-muted-foreground text-sm\">\n                              {saturation[0]}%\n                            </span>\n                          </div>\n                          <Slider\n                            value={saturation}\n                            onValueChange={setSaturation}\n                            min={0}\n                            max={200}\n                            step={1}\n                          />\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            onClick={resetEditor}\n                            className=\"flex-1\"\n                          >\n                            Reset\n                          </Button>\n                          <Button onClick={handleDownload} className=\"flex-1\">\n                            <Download className=\"mr-2 h-4 w-4\" />\n                            Download\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </div>\n                )}\n\n                {!uploadedImage && !generatedImage && (\n                  <div className=\"border-muted-foreground/25 bg-muted/50 flex h-64 flex-col items-center justify-center rounded-lg border-2 border-dashed\">\n                    <ImageIcon className=\"text-muted-foreground mb-4 h-12 w-12\" />\n                    <p className=\"text-muted-foreground text-sm\">\n                      Upload an image or generate one to start editing\n                    </p>\n                  </div>\n                )}\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n",
      "type": "registry:page",
      "target": "app/ai-image-generator/page.tsx"
    }
  ],
  "meta": {
    "iframeHeight": "1000px",
    "container": "w-full bg-surface min-h-svh flex px-4 py-12 items-center md:py-20 justify-center min-w-0",
    "mobile": "component",
    "details": "Comprehensive AI image generation tool with built-in editor. Generate images from text prompts using top AI providers, upload existing images, and edit with real-time adjustments for brightness, contrast, and saturation. Includes image size selection, download functionality, and intuitive tabbed interface. Ideal for creative applications, content generation, and image manipulation tools."
  },
  "categories": [
    "ai-agents"
  ]
}